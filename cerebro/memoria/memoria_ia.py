from typing import List, Dict
import json
import os
from datetime import datetime

class MemoriaIA:
    """Gerenciador de mem√≥ria da IA."""
    
    def __init__(self, tamanho_max_contexto: int = 10):
        self._tamanho_max_contexto = tamanho_max_contexto
        self._historico: List[Dict] = []
        self._memoria_longo_prazo: List[Dict] = []
        self._carregar_memoria()
    
    def adicionar_interacao(self, mensagem: str, resposta: str) -> None:
        """Adiciona uma intera√ß√£o ao hist√≥rico."""
        interacao = {
            'timestamp': datetime.now().isoformat(),
            'mensagem': mensagem,
            'resposta': resposta
        }
        self._historico.append(interacao)
        
        if len(self._historico) > self._tamanho_max_contexto:
            self._arquivar_memoria(self._historico.pop(0))
    
    def obter_contexto(self) -> str:
        """Retorna o contexto atual formatado em markdown."""
        contexto = (
            "### Instru√ß√µes de Formata√ß√£o Markdown\n\n"
            "Use markdown avan√ßado para formatar suas respostas de forma rica e visual:\n\n"
            
            "#### 1. T√≠tulos e Textos\n"
            "- Use # para t√≠tulos (# h1, ## h2, ### h3)\n"
            "- Use **negrito** ou __negrito__ para √™nfase forte\n"
            "- Use *it√°lico* ou _it√°lico_ para √™nfase suave\n"
            "- Use ~~texto~~ para tachado\n"
            "- Use > para cita√ß√µes\n"
            "- Use >>> para cita√ß√µes aninhadas\n\n"
            
            "#### 2. Listas\n"
            "- Use - ou * para listas n√£o ordenadas\n"
            "- Use 1. 2. 3. para listas ordenadas\n"
            "- Use    - para subn√≠veis (4 espa√ßos)\n"
            "- Use - [ ] para tarefas n√£o conclu√≠das\n"
            "- Use - [x] para tarefas conclu√≠das\n\n"
            
            "#### 3. Tabelas\n"
            "```\n"
            "| Alinhado √† Esquerda | Centralizado | Alinhado √† Direita |\n"
            "|:-------------------|:------------:|------------------:|\n"
            "| Conte√∫do          |   Conte√∫do   |          Conte√∫do |\n"
            "```\n\n"
            
            "#### 4. Gr√°ficos ASCII/Unicode\n"
            "- Gr√°fico de Barras:\n"
            "```\n"
            "Vendas 2023 ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 65%\n"
            "Vendas 2024 ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%\n"
            "```\n"
            "- Gr√°fico de Linha:\n"
            "```\n"
            "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Evolu√ß√£o ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            "      ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ         ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ\n"
            "    ‚ï≠‚îÄ‚ïØ     ‚ï∞‚îÄ‚îÄ‚îÄ‚ïÆ ‚ï≠‚îÄ‚îÄ‚îÄ‚ïØ\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ           ‚ï∞‚îÄ‚ïØ\n"
            "```\n\n"
            
            "#### 5. Blocos de C√≥digo\n"
            "- Use ` para c√≥digo inline\n"
            "- Use ``` para blocos de c√≥digo\n"
            "- Use ```python para c√≥digo Python\n"
            "- Use ```mermaid para diagramas\n\n"
            
            "#### 6. Diagramas Mermaid\n"
            "```mermaid\n"
            "graph TD;\n"
            "    A-->B;\n"
            "    B-->C;\n"
            "    C-->D;\n"
            "```\n\n"
            
            "#### 7. Emojis e S√≠mbolos\n"
            "- Use üëâ para indica√ß√µes\n"
            "- Use ‚úÖ para confirma√ß√µes\n"
            "- Use ‚ö†Ô∏è para avisos\n"
            "- Use üìä para dados\n"
            "- Use üí° para dicas\n\n"
            
            "### Hist√≥rico recente da conversa\n\n"
        )
        
        for interacao in self._historico:
            contexto += f"#### üë§ Usu√°rio\n{interacao['mensagem']}\n\n"
            contexto += f"#### ü§ñ Kerubin\n{interacao['resposta']}\n\n"
            contexto += "---\n\n"
        
        return contexto
    
    def _arquivar_memoria(self, interacao: Dict) -> None:
        """Arquiva uma intera√ß√£o na mem√≥ria de longo prazo."""
        self._memoria_longo_prazo.append(interacao)
        self._salvar_memoria()
    
    def _carregar_memoria(self) -> None:
        """Carrega a mem√≥ria de longo prazo do arquivo."""
        home = os.path.expanduser("~")
        arquivo = os.path.join(home, ".kerubin", "memoria", "memoria_longo_prazo.json")
        os.makedirs(os.path.dirname(arquivo), exist_ok=True)
        
        if os.path.exists(arquivo):
            with open(arquivo, 'r', encoding='utf-8') as f:
                self._memoria_longo_prazo = json.load(f)
    
    def _salvar_memoria(self) -> None:
        """Salva a mem√≥ria de longo prazo em arquivo."""
        home = os.path.expanduser("~")
        arquivo = os.path.join(home, ".kerubin", "memoria", "memoria_longo_prazo.json")
        with open(arquivo, 'w', encoding='utf-8') as f:
            json.dump(self._memoria_longo_prazo, f, ensure_ascii=False, indent=4) 